resource "tls_private_key" "ubuntu_private_key" {
  algorithm = "RSA"
  rsa_bits  = 4096

  provisioner "local-exec" {
    command = "mkdir -p .ssh"
  }

  provisioner "local-exec" { # Copy a "my-private-key.pem" to local computer.
    command = "echo '${tls_private_key.ubuntu_private_key.private_key_pem}' | tee ${path.cwd}/.ssh/my-private-key.pem"
  }

  provisioner "local-exec" {
    command = "chmod 600 ${path.cwd}/.ssh/my-private-key.pem"
  }

  provisioner "local-exec" { # Copy a "my-private-key.pem" to local computer.
    command = "echo '${tls_private_key.ubuntu_private_key.public_key_openssh}' | tee ${path.cwd}/.ssh/my-public-key.pub"
  }

  provisioner "local-exec" {
    command = "chmod 600 ${path.cwd}/.ssh/my-public-key.pub"
  }
}

resource "proxmox_virtual_environment_download_file" "ubuntu_cloud_img" {
  content_type = "iso"
  datastore_id = "local"
  node_name    = "pve01"
  // url          = "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img" 
  // Using latest image will destroy vms when file is changed. Prefer to use specific image.
  url          = "https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img"
  upload_timeout = 4444 // seconds, make it longer to accomodate big files
  file_name = "noble-server-cloudimg-amd64-CEPH-PROXMOX.img"
}

resource "random_password" "vm_password" {
  length           = 16
  override_special = "_%@"
  special          = true
}

module "ceph_nodes" {
  source = "./modules/ceph_nodes"
  file_id = proxmox_virtual_environment_download_file.ubuntu_cloud_img.id
  public_key_openssh = tls_private_key.ubuntu_private_key.public_key_openssh

  providers = {
    proxmox = proxmox
  }
}

# Ansible Section 

resource "ansible_host" "ceph_nodes" {
  name   = module.ceph_nodes.ip[count.index]
  groups = ["ceph_nodes","ceph_node_${count.index+1}"]

  variables = {
    ansible_user                 = module.ceph_nodes.vm_user
    ansible_ssh_private_key_file = "./.ssh/my-private-key.pem"
    ansible_python_interpreter   = "/usr/bin/python3"
    host_name                    = module.ceph_nodes.name[count.index]
    private_ip                   = module.ceph_nodes.ip[count.index]
  }

  count = module.ceph_nodes.ceph_count
}

resource "ansible_group" "ceph_nodes" {
  name     = "ceph_nodes"
}

# Export Terraform variable values to an Ansible var_file
resource "local_file" "tf_ansible_vars_file_new" {
  content = <<-DOC
    # Ansible vars_file containing variable values from Terraform.
    # Generated by Terraform mgmt configuration.

    tf_ceph_monitor_ip:
    %{ for ip in module.ceph_nodes.ip ~}
  - ${ip}
    %{ endfor }
    
    DOC
  filename = "./ansible/tf_ansible_vars_file.yaml"
}